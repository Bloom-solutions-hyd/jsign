/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.jsign.gui;

import java.io.File;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

import com.github.jsign.Sign;
import com.github.jsign.keystore.KeyStoreHelper;
import com.github.jsign.model.AvailableProvider;
import com.github.jsign.model.Configuration;
import com.github.jsign.model.OperatingSystem;
import com.github.jsign.util.CertificateUtils;
import com.github.jsign.util.JFrameUtils;

/**
 *
 * @author pablo-moreira
 */
public class DlgConfiguration extends javax.swing.JDialog {
		
	/** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;	
	
	private Sign jSign;
	private File pkcs12File;
	private List<AvailableProvider> availableProviders = new ArrayList<AvailableProvider>();
	private KeyStoreHelper keyStoreHelper;
	private int returnStatus = RET_CANCEL;	
	private AvailableProvider availableProvider;
	private List<KeyStoreHelper> keyStoresHelpersAvailable;

	/**
	 * Creates new form DlgConfiguration
	 */
	public DlgConfiguration(java.awt.Frame parent, boolean modal, Sign sign) {
		super(parent, modal);
		initComponents();
		this.jSign = sign;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgKeyStoreType = new javax.swing.ButtonGroup();
        bgConfigurationType = new javax.swing.ButtonGroup();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnConfigurationAuto = new javax.swing.JPanel();
        btnConfigurationAuto = new javax.swing.JButton();
        lblCertificates = new javax.swing.JLabel();
        spTblCertificates = new javax.swing.JScrollPane();
        tblCertificates = new javax.swing.JTable();
        lblCertificateInfo = new javax.swing.JLabel();
        spTblCertificateInfo = new javax.swing.JScrollPane();
        taCertificateInfo = new javax.swing.JTextArea();
        spTblAvailableProviders = new javax.swing.JScrollPane();
        tblAvailableProviders = new javax.swing.JTable();
        lblProviders = new javax.swing.JLabel();
        pnConfigurationManual = new javax.swing.JPanel();
        rbPKCS12 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        txtPKCS12File = new javax.swing.JTextField();
        btnSelectPKCS12File = new javax.swing.JButton();
        rbMSCAPI = new javax.swing.JRadioButton();
        rbPKCS11 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        cbPKCS11Token = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        btnSelectMSCAPICertificate = new javax.swing.JButton();
        txtCertificateInfo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        pnConfigurationAuto.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        btnConfigurationAuto.setText("Iniciar processo de configuração automática");
        btnConfigurationAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigurationAutoActionPerformed(evt);
            }
        });

        lblCertificates.setText("Lista de certificados:");

        tblCertificates.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Certificado do Usuário", "Certificado do Emissor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCertificates.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblCertificates.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCertificates.getTableHeader().setReorderingAllowed(false);
        tblCertificates.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCertificatesMouseClicked(evt);
            }
        });
        tblCertificates.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblCertificatesKeyReleased(evt);
            }
        });
        spTblCertificates.setViewportView(tblCertificates);
        if (tblCertificates.getColumnModel().getColumnCount() > 0) {
            tblCertificates.getColumnModel().getColumn(0).setPreferredWidth(190);
            tblCertificates.getColumnModel().getColumn(1).setPreferredWidth(230);
        }
        tblCertificates.getColumnModel().getColumn(0).setPreferredWidth(188);
        tblCertificates.getColumnModel().getColumn(1).setPreferredWidth(188);

        lblCertificateInfo.setText("Informações do certificado selecionado:");

        taCertificateInfo.setEditable(false);
        taCertificateInfo.setColumns(20);
        taCertificateInfo.setRows(5);
        spTblCertificateInfo.setViewportView(taCertificateInfo);

        tblAvailableProviders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Descrição"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblAvailableProviders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAvailableProvidersMouseClicked(evt);
            }
        });
        tblAvailableProviders.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblAvailableProvidersKeyReleased(evt);
            }
        });
        spTblAvailableProviders.setViewportView(tblAvailableProviders);

        lblProviders.setText("Providers:");

        javax.swing.GroupLayout pnConfigurationAutoLayout = new javax.swing.GroupLayout(pnConfigurationAuto);
        pnConfigurationAuto.setLayout(pnConfigurationAutoLayout);
        pnConfigurationAutoLayout.setHorizontalGroup(
            pnConfigurationAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnConfigurationAutoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnConfigurationAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spTblAvailableProviders)
                    .addComponent(spTblCertificates, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spTblCertificateInfo, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConfigurationAuto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnConfigurationAutoLayout.createSequentialGroup()
                        .addGroup(pnConfigurationAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCertificateInfo, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCertificates, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProviders, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnConfigurationAutoLayout.setVerticalGroup(
            pnConfigurationAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnConfigurationAutoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnConfigurationAuto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblProviders)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblAvailableProviders, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCertificates)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblCertificates, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCertificateInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblCertificateInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Automática", pnConfigurationAuto);

        pnConfigurationManual.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        bgKeyStoreType.add(rbPKCS12);
        rbPKCS12.setText("PKCS12");
        rbPKCS12.setActionCommand(Configuration.KEY_STORE_TYPE_PKCS12);
        rbPKCS12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPKCS12ActionPerformed(evt);
            }
        });

        jLabel1.setText("Arquivo:");

        txtPKCS12File.setEditable(false);

        btnSelectPKCS12File.setText("...");
        btnSelectPKCS12File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectPKCS12FileActionPerformed(evt);
            }
        });

        bgKeyStoreType.add(rbMSCAPI);
        rbMSCAPI.setText("Windows MSCAPI");
        rbMSCAPI.setActionCommand(Configuration.KEY_STORE_TYPE_MSCAPI);
        rbMSCAPI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMSCAPIActionPerformed(evt);
            }
        });

        bgKeyStoreType.add(rbPKCS11);
        rbPKCS11.setText("PKCS11");
        rbPKCS11.setActionCommand(Configuration.KEY_STORE_TYPE_PKCS11);
        rbPKCS11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPKCS11ActionPerformed(evt);
            }
        });

        jLabel2.setText("Token:");

        cbPKCS11Token.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Certificado:");

        btnSelectMSCAPICertificate.setText("...");
        btnSelectMSCAPICertificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectMSCAPICertificateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnConfigurationManualLayout = new javax.swing.GroupLayout(pnConfigurationManual);
        pnConfigurationManual.setLayout(pnConfigurationManualLayout);
        pnConfigurationManualLayout.setHorizontalGroup(
            pnConfigurationManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnConfigurationManualLayout.createSequentialGroup()
                .addGroup(pnConfigurationManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnConfigurationManualLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(pnConfigurationManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnConfigurationManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnConfigurationManualLayout.createSequentialGroup()
                                .addComponent(txtPKCS12File)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSelectPKCS12File))
                            .addComponent(cbPKCS11Token, 0, 359, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnConfigurationManualLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnConfigurationManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnConfigurationManualLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCertificateInfo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSelectMSCAPICertificate))
                            .addComponent(rbPKCS12)
                            .addComponent(rbMSCAPI)
                            .addComponent(rbPKCS11))))
                .addContainerGap())
        );
        pnConfigurationManualLayout.setVerticalGroup(
            pnConfigurationManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnConfigurationManualLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbPKCS12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnConfigurationManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPKCS12File, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectPKCS12File))
                .addGap(18, 18, 18)
                .addComponent(rbPKCS11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnConfigurationManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbPKCS11Token, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(rbMSCAPI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnConfigurationManualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectMSCAPICertificate)
                    .addComponent(jLabel3)
                    .addComponent(txtCertificateInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(278, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manual", pnConfigurationManual);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (bgKeyStoreType.getSelection() == null) {
            JFrameUtils.showErro("Erro de validação", "Por favor, deve-se informar um tipo de repositório!");
            return;
        }
        else if (Configuration.KEY_STORE_TYPE_PKCS12.equals(bgKeyStoreType.getSelection().getActionCommand())
            && pkcs12File == null) {
            JFrameUtils.showErro("Erro de validação", "Por favor, deve-se definir o endereço do arquivo do certificado PKCS12!");
            return;
        }
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void rbMSCAPIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMSCAPIActionPerformed
        pkcs12File = null;
        updateTxtPKCS12File();
    }//GEN-LAST:event_rbMSCAPIActionPerformed

    private void btnSelectPKCS12FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectPKCS12FileActionPerformed

        JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);
        fc.setAcceptAllFileFilterUsed(false);

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivo PKCS12 (*.p12,*.pfx)", "p12", "pfx");

        fc.setFileFilter(filter);
        fc.addChoosableFileFilter(filter);

        int retorno = fc.showOpenDialog(null);

        if(retorno == JFileChooser.APPROVE_OPTION) {
            pkcs12File = fc.getSelectedFile();
            rbPKCS12.setSelected(true);
            updateTxtPKCS12File();
        }
    }//GEN-LAST:event_btnSelectPKCS12FileActionPerformed

    private void rbPKCS12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPKCS12ActionPerformed
        updateTxtPKCS12File();
    }//GEN-LAST:event_rbPKCS12ActionPerformed

    private void rbPKCS11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPKCS11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbPKCS11ActionPerformed

    private void btnSelectMSCAPICertificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectMSCAPICertificateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSelectMSCAPICertificateActionPerformed

    private void btnConfigurationAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigurationAutoActionPerformed
		loadAvailableProviders();
    }//GEN-LAST:event_btnConfigurationAutoActionPerformed

    private void tblCertificatesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCertificatesMouseClicked
		onSelectCertificate();
    }//GEN-LAST:event_tblCertificatesMouseClicked

    private void tblAvailableProvidersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAvailableProvidersMouseClicked
        onSelectAvailableProvider();
    }//GEN-LAST:event_tblAvailableProvidersMouseClicked

    private void tblCertificatesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblCertificatesKeyReleased
        onSelectCertificate();
    }//GEN-LAST:event_tblCertificatesKeyReleased

    private void tblAvailableProvidersKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblAvailableProvidersKeyReleased
        onSelectAvailableProvider();
    }//GEN-LAST:event_tblAvailableProvidersKeyReleased

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(DlgConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(DlgConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(DlgConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(DlgConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				DlgConfiguration dialog = new DlgConfiguration(new javax.swing.JFrame(), true, null);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgConfigurationType;
    private javax.swing.ButtonGroup bgKeyStoreType;
    private javax.swing.JButton btnConfigurationAuto;
    private javax.swing.JButton btnSelectMSCAPICertificate;
    private javax.swing.JButton btnSelectPKCS12File;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox cbPKCS11Token;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCertificateInfo;
    private javax.swing.JLabel lblCertificates;
    private javax.swing.JLabel lblProviders;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel pnConfigurationAuto;
    private javax.swing.JPanel pnConfigurationManual;
    private javax.swing.JRadioButton rbMSCAPI;
    private javax.swing.JRadioButton rbPKCS11;
    private javax.swing.JRadioButton rbPKCS12;
    private javax.swing.JScrollPane spTblAvailableProviders;
    private javax.swing.JScrollPane spTblCertificateInfo;
    private javax.swing.JScrollPane spTblCertificates;
    private javax.swing.JTextArea taCertificateInfo;
    private javax.swing.JTable tblAvailableProviders;
    private javax.swing.JTable tblCertificates;
    private javax.swing.JTextField txtCertificateInfo;
    private javax.swing.JTextField txtPKCS12File;
    // End of variables declaration//GEN-END:variables

	public void updateTxtPKCS12File() {
        
        if (bgKeyStoreType.getSelection() != null
                && Configuration.KEY_STORE_TYPE_PKCS12.equals(bgKeyStoreType.getSelection().getActionCommand())
                && bgKeyStoreType != null) {
            txtPKCS12File.setText(pkcs12File.getAbsolutePath());
        }
        else {
            txtPKCS12File.setText("");
        }
    }
    
    public void clear() {
        pkcs12File = null;
        txtPKCS12File.setText("");
    }
		
	public void start(Configuration configuration) {

    	rbMSCAPI.setEnabled(false);
        rbMSCAPI.setVisible(false);
		
        hideAvailableProviders();
        hideCertificates();
        hideCertificateInfo();
        		    	
        if (OperatingSystem.isWindows()) {
        	rbMSCAPI.setEnabled(true);
            rbMSCAPI.setVisible(true);
        }
    	
        pack();
        
        clear();

        if (configuration != null) {        
	        if (configuration.isTypePkcs12()) {
	            rbPKCS12.setSelected(true);
	            if (configuration.isDefinedPkcs12File()) {
	                this.pkcs12File = configuration.getPkcs12File();
	                updateTxtPKCS12File();
	            }
	        }
	        else if (configuration.isTypeMscapi()) {
	            rbMSCAPI.setSelected(true);
	        }
        }        
        JFrameUtils.setCenterLocation(this);
        setVisible(true);        
    }    
    
    public Configuration getConfiguration() {

        if (bgKeyStoreType.getSelection() != null) {
           
            Configuration configuration = new Configuration();
            configuration.setType(bgKeyStoreType.getSelection().getActionCommand());
            if (Configuration.KEY_STORE_TYPE_PKCS12.equals(bgKeyStoreType.getSelection().getActionCommand())) {
                configuration.setPkcs12File(pkcs12File);
            }
            return configuration;
        }
        else {
            return null;
        }
    }
	
    public int getReturnStatus() {
        return returnStatus;
    }
	
	private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
	
	private DefaultTableModel getTblAvailableProvidersModel() {
		return (DefaultTableModel) tblAvailableProviders.getModel();
	}
		
	private DefaultTableModel getTblCertificatesModel() {
		return (DefaultTableModel) tblCertificates.getModel();
	}
	
	private void loadAvailableProviders() {
		
		availableProviders = jSign.getManager().getConfigurationManager().getAvailableProviders();
		
		availableProviders.add(new AvailableProvider(null) {
			
			@Override
			public String getType() {
				return "TESTE";
			}
			
			@Override
			public String getDescription() {
				return "TESTE2";
			}
		});
		
		if (availableProviders.size() > 0) {
		
			DefaultTableModel tm = getTblAvailableProvidersModel();

			tm.setRowCount(0);

			for (AvailableProvider ap : availableProviders) {
				tm.addRow(new Object[]{ ap.getType(), ap.getDescription() });
			}
			
			lblProviders.setVisible(true);
			spTblAvailableProviders.setVisible(true);
			tblAvailableProviders.updateUI();
			
			if (availableProviders.size() == 1) {
				tblAvailableProviders.getSelectionModel().setSelectionInterval(0, 0);				
				onSelectAvailableProvider();
			}
		}
		else {
			JFrameUtils.showAlerta("Nenhum provider disponível", "Não foi encontrado nenhum provider disponível!", this);
		}
	}
	
	private void onSelectAvailableProvider() {
		
		hideCertificates();
		hideCertificateInfo();
		
		if (!tblAvailableProviders.getSelectionModel().isSelectionEmpty()) {
        			
			int row = tblAvailableProviders.getSelectedRow();

			availableProvider = availableProviders.get(row);

            if (availableProvider != null) {
                
				try {
					keyStoresHelpersAvailable = jSign.getManager().getConfigurationManager().getKeyStoresHelpersAvailable(availableProvider);
										
					if (keyStoresHelpersAvailable.size() > 0) {

						DefaultTableModel tm = getTblCertificatesModel();

						tm.setRowCount(0);

						for (KeyStoreHelper ksh : keyStoresHelpersAvailable) {
							
				        	String nome = CertificateUtils.getCertificateCN(ksh.getCertificate().getSubjectDN().getName());
							String emissor = CertificateUtils.getCertificateCN(ksh.getCertificate().getIssuerX500Principal().getName());
							tm.addRow(new Object[]{ nome, emissor });
						}

						showCertificates();						

						if (keyStoresHelpersAvailable.size() == 1) {							
							tblCertificates.getSelectionModel().setSelectionInterval(0, 0);
							onSelectCertificate();
						}
					}
					else {
						tblAvailableProviders.getSelectionModel().clearSelection();
						JFrameUtils.showAlerta("Nenhum certicado disponível", "Não foi possível encontrar nenhum certificado disponível para o provider selecionado!", this);						
					}
				}
				catch (Exception e) {
					JFrameUtils.showErro("Erro", e.getMessage());
				}
            }
    	}
	}
	
	private void onSelectCertificate() { 
		if (!tblCertificates.getSelectionModel().isSelectionEmpty()) {

            int row = tblCertificates.getSelectedRow();

			keyStoreHelper = keyStoresHelpersAvailable.get(row);
			
			if (keyStoreHelper != null) {
				
				X509Certificate certificate = keyStoreHelper.getCertificate();
            
                taCertificateInfo.setText("");

                String[] items = certificate.getSubjectDN().getName().split(",");

                for (int i=items.length - 1; i >= 0; i--) {
                    taCertificateInfo.append(items[i].trim() + "\n");
                }
				                
				showCertificateInfo();
            }
		}	
	}
	
	private void showCertificateInfo() {
		changeVisibleCertificateInfo(true);
	}
	
	private void hideCertificateInfo() {
		changeVisibleCertificateInfo(false);
		taCertificateInfo.setText("");
	}
	
	private void changeVisibleCertificateInfo(boolean visible) {
		lblCertificateInfo.setVisible(visible);
		spTblCertificateInfo.setVisible(visible);
	}
	
	private void showCertificates() {
		changeVisibleCertificates(true);
		tblCertificates.updateUI();
	}
	
	private void hideCertificates() {
		changeVisibleCertificates(false);
		tblCertificates.getSelectionModel().clearSelection();
	}
	
	private void changeVisibleCertificates(boolean visible) {
		lblCertificates.setVisible(visible);
		spTblCertificates.setVisible(visible);
	}
	
	private void showAvailableProviders() {
		changeVisibleAvailableProviders(true);
	}
	
	private void hideAvailableProviders() {
		changeVisibleAvailableProviders(false);
		tblAvailableProviders.getSelectionModel().clearSelection();
	}
	
	private void changeVisibleAvailableProviders(boolean visible) {
		lblProviders.setVisible(visible);
		spTblAvailableProviders.setVisible(visible);
	}
	
}
