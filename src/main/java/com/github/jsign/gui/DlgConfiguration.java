/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.jsign.gui;

import java.io.File;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

import com.github.jsign.JSign;
import com.github.jsign.keystore.KeyStoreHelper;
import com.github.jsign.keystore.MSCAPIKeyStoreHelper;
import com.github.jsign.keystore.PKCS11KeyStoreHelper;
import com.github.jsign.keystore.PKCS12KeyStoreHelper;
import com.github.jsign.model.AvailableProvider;
import com.github.jsign.model.Configuration;
import com.github.jsign.util.CertificateUtils;
import com.github.jsign.util.EntityColumnWidthTableModel;
import com.github.jsign.util.EntityTableModel;
import com.github.jsign.util.JFrameUtils;

/**
 *
 * @author pablo-moreira
 */
public class DlgConfiguration extends javax.swing.JDialog {
		
	/** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;	
	
	private JSign jSign;
	private File pkcs12File;
	private List<AvailableProvider> availableProviders = new ArrayList<AvailableProvider>();
	private KeyStoreHelper keyStoreHelper;
	private int returnStatus = RET_CANCEL;	
	private AvailableProvider availableProvider;
	private List<KeyStoreHelper> keyStoresHelpersAvailable;
	private EntityTableModel<File> tblPkcs12CertificatesModel;
	private EntityTableModel<File> tblPkcs11DriversModel;
	private EntityTableModel<AvailableProvider> tblAvailableProvidersModel;
	private EntityColumnWidthTableModel<KeyStoreHelper> tblCertificatesModel;

	/**
	 * Creates new form DlgConfiguration
	 */
	public DlgConfiguration(java.awt.Frame parent, boolean modal, JSign sign) {
		super(parent, modal);
		this.jSign = sign;
		initComponents();		
		init();		
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        tbPanel = new javax.swing.JTabbedPane();
        pnTabConfiguration = new javax.swing.JPanel();
        btnLoadAvailableProviders = new javax.swing.JButton();
        lblProviders = new javax.swing.JLabel();
        spTblAvailableProviders = new javax.swing.JScrollPane();
        tblAvailableProviders = new javax.swing.JTable();
        lblCertificates = new javax.swing.JLabel();
        spTblCertificates = new javax.swing.JScrollPane();
        tblCertificates = new javax.swing.JTable();
        pnTabPkcs11 = new javax.swing.JPanel();
        spTblPkcs11Drivers = new javax.swing.JScrollPane();
        tblPkcs11Drivers = new javax.swing.JTable();
        btnAddPkcs11Driver = new javax.swing.JButton();
        btnDeletePkcs11Driver = new javax.swing.JButton();
        pnTabPkcs12 = new javax.swing.JPanel();
        spTblPkcs12Certificates = new javax.swing.JScrollPane();
        tblPkcs12Certificates = new javax.swing.JTable();
        btnAddPkcs12Certificate = new javax.swing.JButton();
        btnDeletePkcs12Certificate = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        spTblCertificateInfo = new javax.swing.JScrollPane();
        taCertificateInfo = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        txtCertificateType = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCertificateDescription = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Formulário de Configuração");

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        pnTabConfiguration.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        btnLoadAvailableProviders.setText("Carregar providers disponíveis");
        btnLoadAvailableProviders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadAvailableProvidersActionPerformed(evt);
            }
        });

        lblProviders.setText("Providers:");

        tblAvailableProviders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Descrição"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblAvailableProviders.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        spTblAvailableProviders.setViewportView(tblAvailableProviders);

        lblCertificates.setText("Lista de certificados:");

        tblCertificates.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Certificado do Usuário", "Certificado do Emissor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCertificates.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblCertificates.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCertificates.getTableHeader().setReorderingAllowed(false);
        spTblCertificates.setViewportView(tblCertificates);
        tblCertificates.getColumnModel().getColumn(0).setPreferredWidth(188);
        tblCertificates.getColumnModel().getColumn(1).setPreferredWidth(188);

        javax.swing.GroupLayout pnTabConfigurationLayout = new javax.swing.GroupLayout(pnTabConfiguration);
        pnTabConfiguration.setLayout(pnTabConfigurationLayout);
        pnTabConfigurationLayout.setHorizontalGroup(
            pnTabConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTabConfigurationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTabConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spTblAvailableProviders, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                    .addComponent(spTblCertificates, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                    .addComponent(btnLoadAvailableProviders, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnTabConfigurationLayout.createSequentialGroup()
                        .addGroup(pnTabConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCertificates, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProviders, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 324, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnTabConfigurationLayout.setVerticalGroup(
            pnTabConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTabConfigurationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLoadAvailableProviders)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblProviders)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblAvailableProviders, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCertificates)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblCertificates, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                .addContainerGap())
        );

        tbPanel.addTab("Configuração", pnTabConfiguration);

        tblPkcs11Drivers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Driver"
            }
        ));
        tblPkcs11Drivers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        spTblPkcs11Drivers.setViewportView(tblPkcs11Drivers);

        btnAddPkcs11Driver.setText("Adicionar");
        btnAddPkcs11Driver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPkcs11DriverActionPerformed(evt);
            }
        });

        btnDeletePkcs11Driver.setText("Excluir");
        btnDeletePkcs11Driver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePkcs11DriverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnTabPkcs11Layout = new javax.swing.GroupLayout(pnTabPkcs11);
        pnTabPkcs11.setLayout(pnTabPkcs11Layout);
        pnTabPkcs11Layout.setHorizontalGroup(
            pnTabPkcs11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTabPkcs11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spTblPkcs11Drivers, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnTabPkcs11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddPkcs11Driver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeletePkcs11Driver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnTabPkcs11Layout.setVerticalGroup(
            pnTabPkcs11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTabPkcs11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTabPkcs11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spTblPkcs11Drivers, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                    .addGroup(pnTabPkcs11Layout.createSequentialGroup()
                        .addComponent(btnAddPkcs11Driver)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeletePkcs11Driver)
                        .addGap(0, 261, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tbPanel.addTab("PKCS11", pnTabPkcs11);

        pnTabPkcs12.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        pnTabPkcs12.setEnabled(false);

        tblPkcs12Certificates.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Certificado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblPkcs12Certificates.setEnabled(false);
        tblPkcs12Certificates.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        spTblPkcs12Certificates.setViewportView(tblPkcs12Certificates);

        btnAddPkcs12Certificate.setText("Adicionar");
        btnAddPkcs12Certificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPkcs12CertificateActionPerformed(evt);
            }
        });

        btnDeletePkcs12Certificate.setText("Excluir");
        btnDeletePkcs12Certificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePkcs12CertificateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnTabPkcs12Layout = new javax.swing.GroupLayout(pnTabPkcs12);
        pnTabPkcs12.setLayout(pnTabPkcs12Layout);
        pnTabPkcs12Layout.setHorizontalGroup(
            pnTabPkcs12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTabPkcs12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spTblPkcs12Certificates, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnTabPkcs12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddPkcs12Certificate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeletePkcs12Certificate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnTabPkcs12Layout.setVerticalGroup(
            pnTabPkcs12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTabPkcs12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTabPkcs12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spTblPkcs12Certificates, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                    .addGroup(pnTabPkcs12Layout.createSequentialGroup()
                        .addComponent(btnAddPkcs12Certificate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeletePkcs12Certificate)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tbPanel.addTab("PKCS12", pnTabPkcs12);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Certificado Configurado"));

        taCertificateInfo.setEditable(false);
        taCertificateInfo.setColumns(20);
        taCertificateInfo.setRows(5);
        spTblCertificateInfo.setViewportView(taCertificateInfo);

        jLabel1.setText("Tipo:");

        txtCertificateType.setEditable(false);

        jLabel2.setText("Descrição:");

        txtCertificateDescription.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spTblCertificateInfo)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(3, 3, 3)
                        .addComponent(txtCertificateType, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addComponent(txtCertificateDescription)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCertificateType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtCertificateDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spTblCertificateInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tbPanel)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbPanel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOK))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(btnOK);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed

    	if (keyStoreHelper == null) {
    		JFrameUtils.showErro("Erro de validação", "Por favor, deve-se selecionar algum certificado!");
    		return;
    	}
    	
    	Configuration configuration = jSign.getConfiguration();
    	
    	configuration.updateKeyStoreHelper(keyStoreHelper);
    	
    	try {
    		jSign.getManager().getConfigurationManager().writeConfiguration(configuration);
    	}
    	catch (Exception e) {
    		JFrameUtils.showErro("Erro", "Erro ao persistir as configurações!\nMensagem Interna: " + e.getMessage());
    	}
    	
        doClose(RET_OK);
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnAddPkcs12CertificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPkcs12CertificateActionPerformed

        JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);
        fc.setAcceptAllFileFilterUsed(false);

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivo PKCS12 (*.p12,*.pfx)", "p12", "pfx");

        fc.setFileFilter(filter);
        fc.addChoosableFileFilter(filter);

        int retorno = fc.showOpenDialog(null);

        if(retorno == JFileChooser.APPROVE_OPTION) {                        
			addPkcs12Certificate(fc.getSelectedFile());            
        }
    }//GEN-LAST:event_btnAddPkcs12CertificateActionPerformed

    private void btnLoadAvailableProvidersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadAvailableProvidersActionPerformed
		
    	availableProviders = jSign.getManager().getConfigurationManager().getAvailableProviders(jSign.getConfiguration());
    	
    	loadAvailableProviders();
    }//GEN-LAST:event_btnLoadAvailableProvidersActionPerformed

    private void btnAddPkcs11DriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPkcs11DriverActionPerformed

        JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);
        fc.setAcceptAllFileFilterUsed(false);

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Biblioteca PKCS11 do TOKEN (*.dll,*.dylib,*.so)", "dll", "dylib", "so", "so.8", "so.8.0", "so.1", "so.2");

        fc.setFileFilter(filter);
        fc.addChoosableFileFilter(filter);

        int result = fc.showOpenDialog(null);

        if(result == JFileChooser.APPROVE_OPTION) {
            addPkcs11Driver(fc.getSelectedFile());
        }
    }//GEN-LAST:event_btnAddPkcs11DriverActionPerformed

    private void btnDeletePkcs12CertificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePkcs12CertificateActionPerformed
		
		File pkcs12Certificate = tblPkcs12CertificatesModel.getEntitySelected();

		if (pkcs12Certificate != null) {
			deletePkcs12Certificate(pkcs12Certificate);
		}		
    }//GEN-LAST:event_btnDeletePkcs12CertificateActionPerformed

    private void btnDeletePkcs11DriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePkcs11DriverActionPerformed
        		
		File pkcs11Driver = tblPkcs11DriversModel.getEntitySelected();

		if (pkcs11Driver != null) {
			deletePkcs11Driver(pkcs11Driver);
		}	
    }//GEN-LAST:event_btnDeletePkcs11DriverActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(DlgConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(DlgConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(DlgConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(DlgConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				DlgConfiguration dialog = new DlgConfiguration(new javax.swing.JFrame(), true, null);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPkcs11Driver;
    private javax.swing.JButton btnAddPkcs12Certificate;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDeletePkcs11Driver;
    private javax.swing.JButton btnDeletePkcs12Certificate;
    private javax.swing.JButton btnLoadAvailableProviders;
    private javax.swing.JButton btnOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCertificates;
    private javax.swing.JLabel lblProviders;
    private javax.swing.JPanel pnTabConfiguration;
    private javax.swing.JPanel pnTabPkcs11;
    private javax.swing.JPanel pnTabPkcs12;
    private javax.swing.JScrollPane spTblAvailableProviders;
    private javax.swing.JScrollPane spTblCertificateInfo;
    private javax.swing.JScrollPane spTblCertificates;
    private javax.swing.JScrollPane spTblPkcs11Drivers;
    private javax.swing.JScrollPane spTblPkcs12Certificates;
    private javax.swing.JTextArea taCertificateInfo;
    private javax.swing.JTabbedPane tbPanel;
    private javax.swing.JTable tblAvailableProviders;
    private javax.swing.JTable tblCertificates;
    private javax.swing.JTable tblPkcs11Drivers;
    private javax.swing.JTable tblPkcs12Certificates;
    private javax.swing.JTextField txtCertificateDescription;
    private javax.swing.JTextField txtCertificateType;
    // End of variables declaration//GEN-END:variables

  	public void start(boolean loadKeyStoreHelper) {
    
  		Configuration configuration = jSign.getConfiguration();
		
  		reset();
		
  		this.btnOK.setEnabled(false);
                 
  		if (jSign.isAllowsPkcs12Certificate()) {
  			tbPanel.setEnabledAt(2, true);
  		}
        else {
        	tbPanel.setEnabledAt(2, false);
        }
		
		if (configuration.getKeyStoreType() != null && loadKeyStoreHelper) {			
			try {
				this.keyStoreHelper = jSign.getManager().getConfigurationManager().loadKeyStoreHelperByConfiguration(configuration);
			} 
			catch (Exception e) {}
		}
		
		if (this.keyStoreHelper != null) {
			onSelectCertificate(this.keyStoreHelper);
		}
		
        pack();
                      		
        JFrameUtils.setCenterLocation(this);
        setVisible(true);        
    }    
    
    public int getReturnStatus() {
        return returnStatus;
    }
	
	private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
	
	private DefaultTableModel getTblAvailableProvidersModel() {
		return (DefaultTableModel) tblAvailableProviders.getModel();
	}
		
	private DefaultTableModel getTblCertificatesModel() {
		return (DefaultTableModel) tblCertificates.getModel();
	}
	
	private void loadAvailableProviders() {
				
		if (availableProviders.size() > 0) {
			
			showAvailableProviders();
			
			tblAvailableProviders.updateUI();
			
			if (availableProviders.size() == 1) {
				tblAvailableProviders.getSelectionModel().setSelectionInterval(0, 0);
				onSelectAvailableProvider();
			}
		}
		else {
			JFrameUtils.showAlerta("Nenhum provider disponível", "Não foi encontrado nenhum provider disponível!", this);
		}
	}
	
	private void onSelectAvailableProvider() {
		
		hideCertificates();

		availableProvider = tblAvailableProvidersModel.getEntitySelected();

		if (availableProvider != null) {

			try {
				keyStoresHelpersAvailable = jSign.getManager().getConfigurationManager().getKeyStoresHelpersAvailable(availableProvider);

				if (keyStoresHelpersAvailable.size() > 0) {

					showCertificates();

					if (keyStoresHelpersAvailable.size() == 1) {
						tblCertificates.getSelectionModel().setSelectionInterval(0, 0);
					}
				}
				else {
					tblAvailableProviders.getSelectionModel().clearSelection();
					JFrameUtils.showAlerta("Nenhum certicado disponível", "Não foi possível encontrar nenhum certificado disponível para o provider selecionado!", this);						
				}
			}
			catch (Exception e) {
				JFrameUtils.showErro("Erro", e.getMessage());
			}
		}
	}
	
	private void onSelectCertificate(KeyStoreHelper keyStoreHelperSelected) { 

		if (keyStoreHelperSelected != null) {

			keyStoreHelper = keyStoreHelperSelected;
			btnOK.setEnabled(true);

			X509Certificate certificate = keyStoreHelperSelected.getCertificate();

			txtCertificateType.setText(keyStoreHelperSelected.getType().name());
			txtCertificateDescription.setText(keyStoreHelperSelected.getDescription());
						
            taCertificateInfo.setText("");
			
			String[] items = certificate.getSubjectDN().getName().split(",");

			for (int i=items.length - 1; i >= 0; i--) {
				taCertificateInfo.append(items[i].trim() + "\n");
			}
		}
	}
	
	private void showCertificates() {
		changeVisibleCertificates(true);
		tblCertificates.updateUI();
	}
	
	private void hideCertificates() {
		changeVisibleCertificates(false);
		tblCertificates.getSelectionModel().clearSelection();
	}
	
	private void changeVisibleCertificates(boolean visible) {
		lblCertificates.setVisible(visible);
		spTblCertificates.setVisible(visible);
	}
	
	private void showAvailableProviders() {
		changeVisibleAvailableProviders(true);
	}
	
	private void hideAvailableProviders() {
		changeVisibleAvailableProviders(false);
		tblAvailableProviders.getSelectionModel().clearSelection();
	}
	
	private void changeVisibleAvailableProviders(boolean visible) {
		lblProviders.setVisible(visible);
		spTblAvailableProviders.setVisible(visible);
	}
			
	private void addPkcs11Driver(File pkcs11Driver) {
		try {
			jSign.getManager().getPkcs11Manager().addPkcs11Driver(jSign.getConfiguration(), pkcs11Driver);
			tblPkcs11DriversModel.fireTableDataChanged();
		}
		catch (Exception e) {
			JFrameUtils.showErro("Erro", e.getMessage());
		}
	}
	
	private void addPkcs12Certificate(File pkcs12Certificate) {
		try {			
			jSign.getManager().getPkcs12Manager().addPkcs12Certificate(jSign.getConfiguration(), pkcs12Certificate);
			tblPkcs12CertificatesModel.fireTableDataChanged();
		}
		catch (Exception e) {
			JFrameUtils.showErro("Erro", e.getMessage());
		}
	}
	
	private void deletePkcs11Driver(File pkcs11Driver) {
		try {			
			jSign.getManager().getPkcs11Manager().deletePkcs11Driver(jSign.getConfiguration(), pkcs11Driver);
			tblPkcs11DriversModel.fireTableDataChanged();			
			resetPkcs11Drivers();
		}
		catch (Exception e) {
			JFrameUtils.showErro("Erro", e.getMessage());
		}
	}
	
	private void deletePkcs12Certificate(File pkcs12Certificate) {
		try {
			jSign.getManager().getPkcs12Manager().deletePkcs12Certificate(jSign.getConfiguration(), pkcs12Certificate);			
			tblPkcs12CertificatesModel.fireTableDataChanged();
			resetPkcs12Certificates();
		}
		catch (Exception e) {
			JFrameUtils.showErro("Erro", e.getMessage());
		}
	}

	private void init() {
			
		tblAvailableProvidersModel = new EntityColumnWidthTableModel<AvailableProvider>(tblAvailableProviders) {

			@Override
			public String[] getColumns() {
				return new String[] { "Tipo", "Descrição" };
			}

			@Override
			public List<AvailableProvider> getEntities() {
				return availableProviders;
			}

			@Override
			public Object getValueAt(AvailableProvider entity, int columnIndex) {
                switch (columnIndex) {
                    case 0 :
                        return entity.getType();
					case 1 :
                        return entity.getDescription();
                    default :
                        return null;
                }
			}			

			@Override
			public Integer[] getColumnsWidth() {
				return new Integer[]{ 40, 350 };
			}
		};
		
		tblAvailableProviders.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                onSelectAvailableProvider();
            }
        });
		
		tblCertificatesModel = new EntityColumnWidthTableModel<KeyStoreHelper>(tblCertificates) {

			@Override
			public Integer[] getColumnsWidth() {
				return new Integer[] { 190, 310 };
			}

			@Override
			public String[] getColumns() {
				return new String[] { "Certificado do Usuário", "Certificado do Emissor"  };
			}

			@Override
			public List<KeyStoreHelper> getEntities() {
				return keyStoresHelpersAvailable;
			}

			@Override
			public Object getValueAt(KeyStoreHelper entity, int columnIndex) {
                switch (columnIndex) {
                    case 0 :
						return CertificateUtils.getCertificateCN(entity.getCertificate().getSubjectDN().getName());
					case 1 :
                        return CertificateUtils.getCertificateCN(entity.getCertificate().getIssuerX500Principal().getName());
                    default :
                        return null;
                }
			}
		};
		
		tblCertificates.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
				onSelectCertificate(tblCertificatesModel.getEntitySelected());
					

            }
        });
		
		tblPkcs12CertificatesModel = new EntityTableModel<File>(tblPkcs12Certificates) {

            @Override
            public String[] getColumns() {
                return new String[] { "Certificado" };
            }
			
            @Override
            public List<File> getEntities() {
                return jSign.getConfiguration().getPkcs12Certificates();
            }

            @Override
            public Object getValueAt(File entity, int columnIndex) {
                switch (columnIndex) {
                    case 0 :
                        return entity.getAbsoluteFile();                   
                    default :
                        return null;
                }
            }
        };
		
		tblPkcs12Certificates.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (tblPkcs12Certificates.getSelectedRowCount() > 0) {
                    btnDeletePkcs12Certificate.setEnabled(true);
                }
            }
        });
		
		tblPkcs11DriversModel = new EntityTableModel<File>(tblPkcs11Drivers) {
			
			@Override
			public String[] getColumns() {
				return new String[] { "Driver" };
			}
			
			@Override
			public List<File> getEntities() {
				return jSign.getConfiguration().getPkcs11Drivers();
			}
			
			@Override
			public Object getValueAt(File entity, int columnIndex) {
				switch (columnIndex) {
                    case 0 :
                        return entity.getAbsoluteFile();
                    default :
                        return null;
                }
			}
		};
		
		tblPkcs11Drivers.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (tblPkcs11Drivers.getSelectedRowCount() > 0) {
                    btnDeletePkcs11Driver.setEnabled(true);
                }
            }
        });
	}
	
	private void reset() {
		
		hideAvailableProviders();
		hideCertificates();		
					
		availableProviders = new ArrayList<AvailableProvider>();
		keyStoresHelpersAvailable = new ArrayList<KeyStoreHelper>();
		
		resetPkcs11Drivers();
		resetPkcs12Certificates();
	}
	
	private void resetPkcs11Drivers() {
		tblPkcs11Drivers.clearSelection();
		btnDeletePkcs11Driver.setEnabled(false);
	}
	
	private void resetPkcs12Certificates() {
		tblPkcs12Certificates.clearSelection();
		btnDeletePkcs12Certificate.setEnabled(false);
	}

	public KeyStoreHelper getKeyStoreHelper() {
		return keyStoreHelper;
	}
}