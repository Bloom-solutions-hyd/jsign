/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.jsign.gui;

import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.List;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import com.github.jsign.keystore.KeyStoreHelper;
import com.github.jsign.keystore.MSCAPIKeyStoreHelper;
import com.github.jsign.util.CertificateUtils;
import com.github.jsign.util.EntityColumnWidthTableModel;
import com.github.jsign.util.JFrameUtils;

/**
 * @author pablo.filetti@gmail.com
 */
public class DlgConfigurationWindows extends javax.swing.JDialog {
	
	private static final long serialVersionUID = 1L;
	
	/** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if Finish button has been pressed */
    public static final int RET_FINISH = 1;
	/** A return status code - returned if Advanced button has been pressed */
	public static final int RET_OPEN_DLG_CONFIGURATION = 2;
	
	private EntityColumnWidthTableModel<MSCAPIKeyStoreHelper> tblCertificatesModel;
	private List<MSCAPIKeyStoreHelper> keyStoresHelpers = new ArrayList<MSCAPIKeyStoreHelper>();
	private KeyStoreHelper keyStoreHelper;
	private int returnStatus;
	
	/**
	 * Creates new form DlgConfigurationWindows
	 */
	public DlgConfigurationWindows(java.awt.Frame parent, boolean modal) {
		super(parent , modal);
		initComponents();
		init();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCertificates = new javax.swing.JLabel();
        spTblCertificates = new javax.swing.JScrollPane();
        tblCertificates = new javax.swing.JTable();
        lblCertificateSelected = new javax.swing.JLabel();
        spTblCertificateInfo = new javax.swing.JScrollPane();
        taCertificateInfo = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        btnFinish = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnAdvance = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Formulário de Configuração");

        lblCertificates.setText("Lista de certificados:");

        tblCertificates.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Certificado do Usuário", "Certificado do Emissor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCertificates.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblCertificates.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCertificates.getTableHeader().setReorderingAllowed(false);
        spTblCertificates.setViewportView(tblCertificates);
        tblCertificates.getColumnModel().getColumn(0).setPreferredWidth(300);
        tblCertificates.getColumnModel().getColumn(1).setPreferredWidth(300);

        lblCertificateSelected.setText("Certificado Selecionado:");

        taCertificateInfo.setEditable(false);
        taCertificateInfo.setColumns(20);
        taCertificateInfo.setRows(5);
        spTblCertificateInfo.setViewportView(taCertificateInfo);

        btnFinish.setText("Concluir");
        btnFinish.setEnabled(false);
        btnFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancelar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnAdvance.setText("Configuração Avançada");
        btnAdvance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdvanceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spTblCertificateInfo, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spTblCertificates, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAdvance)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFinish)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCertificates)
                            .addComponent(lblCertificateSelected))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCertificates)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblCertificates, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addGap(13, 13, 13)
                .addComponent(lblCertificateSelected)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblCertificateInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFinish)
                    .addComponent(btnCancel)
                    .addComponent(btnAdvance))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdvanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdvanceActionPerformed
        doClose(RET_OPEN_DLG_CONFIGURATION);
    }//GEN-LAST:event_btnAdvanceActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
		doClose(RET_CANCEL);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishActionPerformed
		if (this.keyStoreHelper != null) {
			doClose(RET_FINISH);
		}
    }//GEN-LAST:event_btnFinishActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(DlgConfigurationWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(DlgConfigurationWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(DlgConfigurationWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(DlgConfigurationWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				DlgConfigurationWindows dialog = new DlgConfigurationWindows(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdvance;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnFinish;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblCertificateSelected;
    private javax.swing.JLabel lblCertificates;
    private javax.swing.JScrollPane spTblCertificateInfo;
    private javax.swing.JScrollPane spTblCertificates;
    private javax.swing.JTextArea taCertificateInfo;
    private javax.swing.JTable tblCertificates;
    // End of variables declaration//GEN-END:variables

	private void init() {
		
		tblCertificatesModel = new EntityColumnWidthTableModel<MSCAPIKeyStoreHelper>(tblCertificates) {

			private static final long serialVersionUID = 1L;

			@Override
			public Integer[] getColumnsWidth() {
				return new Integer[] { 300, 310 };
			}

			@Override
			public String[] getColumns() {
				return new String[] { "Certificado do Usuário", "Certificado do Emissor" };
			}

			@Override
			public List<MSCAPIKeyStoreHelper> getEntities() {
				return keyStoresHelpers;
			}

			@Override
			public Object getValueAt(MSCAPIKeyStoreHelper entity, int columnIndex) {
                switch (columnIndex) {
                    case 0 :
						return CertificateUtils.getCertificateCN(entity.getCertificate().getSubjectDN().getName());
					case 1 :
                        return CertificateUtils.getCertificateCN(entity.getCertificate().getIssuerX500Principal().getName());
                    default :
                        return null;
                }
			}
		};
		
		tblCertificates.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
				onSelectCertificate(tblCertificatesModel.getEntitySelected());
			}
        });		
	}

	private void onSelectCertificate(KeyStoreHelper keyStoreHelperSelected) { 

		if (keyStoreHelperSelected != null) {

			keyStoreHelper = keyStoreHelperSelected;
			btnFinish.setEnabled(true);

			X509Certificate certificate = keyStoreHelperSelected.getCertificate();

            taCertificateInfo.setText("");
			
			String[] items = certificate.getSubjectDN().getName().split(",");

			for (int i=items.length - 1; i >= 0; i--) {
				taCertificateInfo.append(items[i].trim() + "\n");
			}
		}
	}
	
	public void start(List<MSCAPIKeyStoreHelper> keyStoresHelpers) {
    
		this.keyStoresHelpers = keyStoresHelpers;
		
		tblCertificates.clearSelection();
		
		pack();

        JFrameUtils.setCenterLocation(this);
        setVisible(true);        
    }
	
    public int getReturnStatus() {
        return returnStatus;
    }
	
	private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

	public KeyStoreHelper getKeyStoreHelper() {
		return keyStoreHelper;
	}
}