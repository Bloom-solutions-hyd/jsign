/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmTipoRepositorio.java
 *
 * Created on 02/06/2011, 13:33:14
 */
package com.github.jsign.gui;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;

import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.KeyStroke;
import javax.swing.filechooser.FileNameExtensionFilter;

import com.github.jsign.model.OperatingSystem;
import com.github.jsign.model.Repository;
import com.github.jsign.util.JFrameUtils;


public class FrmTipoRepositorio extends javax.swing.JDialog {

	private static final long serialVersionUID = 1L;

	/** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;
    
    private File pkcs12Arquivo;
    
    public void limpar() {
        pkcs12Arquivo = null;
        txtPkcs12Arquivo.setText("");
    }
    
    public void start(Repository repository) {

    	rbMscapi.setEnabled(false);
        rbMscapi.setVisible(false);
    	
        if (OperatingSystem.isOsWindows()) {
        	rbMscapi.setEnabled(true);
            rbMscapi.setVisible(true);
        }
    	
        pack();
        
        limpar();

        if (repository != null) {        
	        if (repository.isTypePkcs12()) {
	            rbPkcs12.setSelected(true);
	            if (repository.isDefinedPkcs12File()) {
	                this.pkcs12Arquivo = repository.getPkcs12File();
	                atualizarTxtPkcs12Arquivo();
	            }
	        }
	        else if (repository.isTypeMscapi()) {
	            rbMscapi.setSelected(true);
	        }
        }
        
        JFrameUtils.setCenterLocation(this);
        setVisible(true);        
    }    
    
    public Repository getTipoRepositorio() {

        if (bgTipoRepositorio.getSelection() != null) {
           
            Repository tipoRepositorio = new Repository();
            tipoRepositorio.setType(bgTipoRepositorio.getSelection().getActionCommand());
            if (Repository.KEY_STORE_TYPE_PKCS12.equals(bgTipoRepositorio.getSelection().getActionCommand())) {
                tipoRepositorio.setPkcs12File(pkcs12Arquivo);
            }
            return tipoRepositorio;
        }
        else {
            return null;
        }
    }
    
    /** Creates new form FrmTipoRepositorio */
    public FrmTipoRepositorio(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {

			private static final long serialVersionUID = 1L;

			public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgTipoRepositorio = new javax.swing.ButtonGroup();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        rbPkcs12 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        txtPkcs12Arquivo = new javax.swing.JTextField();
        btnSelecionarArquivoPkcs12 = new javax.swing.JButton();
        rbMscapi = new javax.swing.JRadioButton();

        setTitle("Formulário de tipo de repositório");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de repositório:"));

        bgTipoRepositorio.add(rbPkcs12);
        rbPkcs12.setText("Arquivo PKCS12");
        rbPkcs12.setActionCommand("pkcs12");
        rbPkcs12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPkcs12ActionPerformed(evt);
            }
        });

        jLabel1.setText("Arquivo:");

        btnSelecionarArquivoPkcs12.setText("...");
        btnSelecionarArquivoPkcs12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarArquivoPkcs12ActionPerformed(evt);
            }
        });

        bgTipoRepositorio.add(rbMscapi);
        rbMscapi.setText("Windows MsCapi");
        rbMscapi.setActionCommand("mscapi");
        rbMscapi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMscapiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(rbPkcs12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPkcs12Arquivo, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(btnSelecionarArquivoPkcs12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(rbMscapi)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(rbPkcs12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPkcs12Arquivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelecionarArquivoPkcs12))
                .addGap(18, 18, 18)
                .addComponent(rbMscapi)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(268, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (bgTipoRepositorio.getSelection() == null) {
            JFrameUtils.showErro("Erro de validação", "Por favor, deve-se informar um tipo de repositório!");
            return;
        }
        else if (Repository.KEY_STORE_TYPE_PKCS12.equals(bgTipoRepositorio.getSelection().getActionCommand())
                && pkcs12Arquivo == null) {
            JFrameUtils.showErro("Erro de validação", "Por favor, deve-se definir o endereço do arquivo do certificado PKCS12!");
            return;
        }
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void rbPkcs12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPkcs12ActionPerformed
        atualizarTxtPkcs12Arquivo();
    }//GEN-LAST:event_rbPkcs12ActionPerformed

    private void btnSelecionarArquivoPkcs12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarArquivoPkcs12ActionPerformed
        JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);
        fc.setAcceptAllFileFilterUsed(false);

        FileNameExtensionFilter filtroPadrao = new FileNameExtensionFilter("Arquivo PKCS12 (*.P12)", "p12");

        fc.setFileFilter(filtroPadrao);
        fc.addChoosableFileFilter(filtroPadrao);

        int retorno = fc.showOpenDialog(null);				

        if(retorno == JFileChooser.APPROVE_OPTION) {
                pkcs12Arquivo = fc.getSelectedFile();
                rbPkcs12.setSelected(true);						
                atualizarTxtPkcs12Arquivo();
        }
    }//GEN-LAST:event_btnSelecionarArquivoPkcs12ActionPerformed

    private void rbMscapiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMscapiActionPerformed
        pkcs12Arquivo = null;
        atualizarTxtPkcs12Arquivo();
    }//GEN-LAST:event_rbMscapiActionPerformed
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                FrmTipoRepositorio dialog = new FrmTipoRepositorio(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgTipoRepositorio;
    private javax.swing.JButton btnSelecionarArquivoPkcs12;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton okButton;
    private javax.swing.JRadioButton rbMscapi;
    private javax.swing.JRadioButton rbPkcs12;
    private javax.swing.JTextField txtPkcs12Arquivo;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;

    public void atualizarTxtPkcs12Arquivo() {
        
        if (bgTipoRepositorio.getSelection() != null
                && Repository.KEY_STORE_TYPE_PKCS12.equals(bgTipoRepositorio.getSelection().getActionCommand())
                && pkcs12Arquivo != null) {
            txtPkcs12Arquivo.setText(pkcs12Arquivo.getAbsolutePath());
        }
        else {
            txtPkcs12Arquivo.setText("");
        }
    }
}
