/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.jsign.gui;

import java.net.URL;
import java.util.Collection;

import com.github.jsign.model.Token;
import com.github.jsign.util.EntityColumnWidthTableModel;
import com.github.jsign.util.JFrameUtils;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.net.URI;

import java.util.List;

/**
 * @author pablo.filetti@gmail.com
 */
public class DlgCertificateNotFound extends javax.swing.JDialog {
	
	private static final long serialVersionUID = 1L;
	
	public static final int RET_CANCEL = 0;
	public static final int RET_TRY_AGAIN = 1;
	public static final int RET_OPEN_DLG_CONFIGURATION = 2;
	
	private int returnStatus;
	private Collection<Token> tokensDriversInstalledOnSystem;
	private URL urlDriversInstallationHelpPage;
	
	/**
	 * Creates new form DlgCertificadoNaoEncontrado
	 */
	public DlgCertificateNotFound(java.awt.Frame parent, boolean modal) {
		super(parent,modal);
		initComponents();
		init();
		try {
			this.urlDriversInstallationHelpPage = new URL("http://driver.token.help.page.com");
		}
		catch (Exception e) {}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnHeader = new javax.swing.JPanel();
        lblHeaderDescription = new javax.swing.JLabel();
        lblHeaderTitle = new javax.swing.JLabel();
        lblHeaderIcon = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        spTblTokensDrivers = new javax.swing.JScrollPane();
        tblTokensDrivers = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnConfigurationAdvanced = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnTryAgain = new javax.swing.JButton();
        lblDriversInstallationHelpPage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Certificado não econtrado");

        pnHeader.setBackground(new java.awt.Color(255, 255, 255));

        lblHeaderDescription.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblHeaderDescription.setText("Não foi possível encontrar nenhum certificado digital!");

        lblHeaderTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblHeaderTitle.setText("Ops...");

        lblHeaderIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/alert.png"))); // NOI18N

        javax.swing.GroupLayout pnHeaderLayout = new javax.swing.GroupLayout(pnHeader);
        pnHeader.setLayout(pnHeaderLayout);
        pnHeaderLayout.setHorizontalGroup(
            pnHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeaderIcon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeaderTitle)
                    .addComponent(lblHeaderDescription))
                .addContainerGap(228, Short.MAX_VALUE))
        );
        pnHeaderLayout.setVerticalGroup(
            pnHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnHeaderLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblHeaderTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblHeaderDescription))
                    .addComponent(lblHeaderIcon))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setText("- Verificamos que seu computador tem instalado o(s) seguinte(s) driver(s):");

        tblTokensDrivers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Descrição"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblTokensDrivers.setRowSelectionAllowed(false);
        spTblTokensDrivers.setViewportView(tblTokensDrivers);

        jLabel5.setText("- Verique se o driver do seu dispositivo esta na lista superior?");

        jLabel7.setText(" - Se sim verifique se o dispositivo esta conectado corretamente no computador e tente novamente.");

        jLabel6.setText(" - Se não clique no link abaixo para ir para página de ajuda de instalação de drivers de dispositivos.");

        btnConfigurationAdvanced.setText("Configuração Avançada");
        btnConfigurationAdvanced.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigurationAdvancedActionPerformed(evt);
            }
        });

        btnClose.setText("Fechar");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnTryAgain.setText("Verificar Novamente");
        btnTryAgain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTryAgainActionPerformed(evt);
            }
        });

        lblDriversInstallationHelpPage.setForeground(new java.awt.Color(51, 102, 255));
        lblDriversInstallationHelpPage.setText("http://driver.token.help.page.com");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spTblTokensDrivers)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnConfigurationAdvanced)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTryAgain)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(lblDriversInstallationHelpPage)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTblTokensDrivers, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDriversInstallationHelpPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfigurationAdvanced)
                    .addComponent(btnClose)
                    .addComponent(btnTryAgain))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnTryAgainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTryAgainActionPerformed
        doClose(RET_TRY_AGAIN);
    }//GEN-LAST:event_btnTryAgainActionPerformed

    private void btnConfigurationAdvancedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigurationAdvancedActionPerformed
        doClose(RET_OPEN_DLG_CONFIGURATION);
    }//GEN-LAST:event_btnConfigurationAdvancedActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(DlgCertificateNotFound.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(DlgCertificateNotFound.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(DlgCertificateNotFound.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(DlgCertificateNotFound.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>
        //</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				DlgCertificateNotFound dialog = new DlgCertificateNotFound(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnConfigurationAdvanced;
    private javax.swing.JButton btnTryAgain;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lblDriversInstallationHelpPage;
    private javax.swing.JLabel lblHeaderDescription;
    private javax.swing.JLabel lblHeaderIcon;
    private javax.swing.JLabel lblHeaderTitle;
    private javax.swing.JPanel pnHeader;
    private javax.swing.JScrollPane spTblTokensDrivers;
    private javax.swing.JTable tblTokensDrivers;
    // End of variables declaration//GEN-END:variables

	private void doClose(int retStatus) {
        this.returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

	public int getReturnStatus() {
		return returnStatus;
	}
	
	public void start(Collection<Token> tokensDriversInstalledOnSystem) {
		
		this.tokensDriversInstalledOnSystem = tokensDriversInstalledOnSystem;

		this.lblDriversInstallationHelpPage.setText(this.urlDriversInstallationHelpPage.toString());
		
		pack();
        JFrameUtils.setCenterLocation(this);
        setVisible(true);   
	}

	private void init() {	
		
		this.lblDriversInstallationHelpPage.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		this.lblDriversInstallationHelpPage.addMouseListener(new MouseListener() {

			@Override
			public void mouseReleased(MouseEvent e) {}

			@Override
			public void mousePressed(MouseEvent e) {
				Desktop desktop = Desktop.getDesktop();
				try {
					desktop.browse(urlDriversInstallationHelpPage.toURI());
				} 
				catch (Exception ex) {}
			}

			@Override
			public void mouseExited(MouseEvent e) {}

			@Override
			public void mouseEntered(MouseEvent e) {}

			@Override
			public void mouseClicked(MouseEvent e) {}
		});
		
		new EntityColumnWidthTableModel<Token>(tblTokensDrivers) {

			private static final long serialVersionUID = 1L;

			@Override
			public String[] getColumns() {
				return new String[] { "Nome", "Descrição" };
			}

			@Override
			public List<Token> getEntities() {
				return (List<Token>) tokensDriversInstalledOnSystem;
			}

			@Override
			public Object getValueAt(Token entity, int columnIndex) {
                switch (columnIndex) {
                    case 0 :
                        return entity.getName();
					case 1 :
                        return entity.getDescription();
                    default :
                        return null;
                }
			}

			@Override
			public Integer[] getColumnsWidth() {
				return new Integer[]{ 200, 350 };
			}
		};
	}
	
	public void setUrlDriversInstallationHelpPage(URL urlDriversInstallationHelpPage) {
		this.urlDriversInstallationHelpPage = urlDriversInstallationHelpPage;		
	}
}