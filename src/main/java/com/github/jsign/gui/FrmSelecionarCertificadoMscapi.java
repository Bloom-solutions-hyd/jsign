package com.github.jsign.gui;


import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.security.cert.X509Certificate;
import java.util.List;

import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;

import com.github.jsign.util.CertificateUtils;
import com.github.jsign.util.JFrameUtils;

/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmSelecionarCertificadoMscapi.java
 *
 * Created on 01/06/2011, 12:28:55
 */
public class FrmSelecionarCertificadoMscapi extends javax.swing.JDialog {

	private static final long serialVersionUID = 1L;

	/** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;
    
    private List<X509Certificate> certificados;
    private X509Certificate certificado;

    public X509Certificate getCertificado() {
        return certificado;
    }
    
    public void iniciar(List<X509Certificate> certificados) {
        
    	limpar();
        
        this.certificados = certificados;
        
                
        DefaultTableModel tm = getJTableCertificadosModel();
        tm.setRowCount(0);
                
        for (X509Certificate certificado : certificados) {
        	String nome = CertificateUtils.getCertificadoCN(certificado.getSubjectDN().getName());
        	String emissor = CertificateUtils.getCertificadoCN(certificado.getIssuerX500Principal().getName());
        	tm.addRow(new Object[]{ nome, emissor });
        }

        JFrameUtils.setCenterLocation(this);
        setAlwaysOnTop(true);
        setVisible(true);
    }

    private void limpar() {
    	certificado = null;
    	jTextAreaCertificado.setText("");
    }

    private DefaultTableModel getJTableCertificadosModel() {
    	return (DefaultTableModel) jTableCertificados.getModel();
    }

    /** Creates new form FrmSelecionarCertificadoMscapi */
    public FrmSelecionarCertificadoMscapi(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {

			private static final long serialVersionUID = 1L;

			public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }
    
    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }      
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jButtonOK = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCertificados = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaCertificado = new javax.swing.JTextArea();

        setTitle("Formulário de seleção de certificado digital.");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jLabel1.setText("Lista de certificados:");

        jTableCertificados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Certificado do Usuário", "Certificado do Emissor"
            }
        ) {
			private static final long serialVersionUID = 1L;
			Class<?>[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class<?> getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCertificados.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableCertificados.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableCertificados.getTableHeader().setReorderingAllowed(false);
        jTableCertificados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCertificadosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableCertificados);
        jTableCertificados.getColumnModel().getColumn(0).setPreferredWidth(188);
        jTableCertificados.getColumnModel().getColumn(1).setPreferredWidth(188);

        jLabel2.setText("Informações do certificado selecionado:");

        jTextAreaCertificado.setColumns(20);
        jTextAreaCertificado.setEditable(false);
        jTextAreaCertificado.setRows(5);
        jScrollPane2.setViewportView(jTextAreaCertificado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonOK)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancelar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancelar)
                    .addComponent(jButtonOK))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if (certificado == null) {
    		JFrameUtils.showErro("Erro de validação", "Por favor, você deve escolher um certificado!");
    	}
    	else {
    		doClose(RET_OK);
    	}       
    }                                         

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {                                                
        doClose(RET_CANCEL);
    }                                               

    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
         doClose(RET_CANCEL);
    }                                  

    private void jTableCertificadosMouseClicked(java.awt.event.MouseEvent evt) {                                                
        if (!jTableCertificados.getSelectionModel().isSelectionEmpty()) {
            int row = jTableCertificados.getSelectedRow();

	    certificado = certificados.get(row);

            if (certificado != null) {

                jTextAreaCertificado.setText("");

                String[] items = certificado.getSubjectDN().getName().split(",");

                for (int i=items.length - 1; i >= 0; i--) {
                    jTextAreaCertificado.append(items[i].trim() + "\n");
                }
            }
    	}
    }                                               

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                FrmSelecionarCertificadoMscapi dialog = new FrmSelecionarCertificadoMscapi(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableCertificados;
    private javax.swing.JTextArea jTextAreaCertificado;
    // End of variables declaration
    private int returnStatus = RET_CANCEL;
}
